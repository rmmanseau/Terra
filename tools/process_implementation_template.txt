#include "class_file.h"

PROCESS_NAME::PROCESS_NAME()
{}

PROCESS_NAME::Node::Node(std::weak_ptr<COMPONENT_TYPE> _component_)
    : invalid(false)
    , _component_(_component_)
{}

void PROCESS_NAME::removeInvalidNodes()
{
    nodes.erase(std::remove_if(nodes.begin(), nodes.end(),
                               [](Node& node) { return node.invalid; }),
                nodes.end());
}

void PROCESS_NAME::registerEntity(Entity& entity)
{
    std::weak_ptr<COMPONENT_TYPE> _component_ = entity.getComponent<COMPONENT_TYPE>();

    if (_component_.lock())
        nodes.push_back(Node(_component_));
}

void PROCESS_NAME::update()
{
    for (auto itr = nodes.begin();
         itr != nodes.end(); ++itr)
    {        
        std::shared_ptr<COMPONENT_TYPE> _component_ = itr->_component_.lock();

        if (_component_)
        {
            // Do stuff here ...
        }
        else
        {
            itr->invalid = true;
        }
    }
    removeInvalidNodes();

    // Do stuff here ...
}
